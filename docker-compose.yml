version: '3.8'
services:

  frontend:
    hostname: frontend
    image: plantei-frontend:1.0
    container_name: plantei-frontend
    cap_drop: ["ALL"]
    build:
      context: plantei-frontend
      dockerfile: Dockerfile
    networks:
      - front
    ports:
      - 3000:3000

  database:
    hostname: database
    container_name: plantei_database
    image: plantei_database:1.0
    build:
      context: database
      dockerfile: Dockerfile
    stop_signal: SIGINT

    deploy:
      resources:
        limits:
          memory: 200M
          pids: 30
        reservations:
          memory: 50M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    user: "postgres"
    restart: unless-stopped
    cap_drop: ["ALL"]

    environment:
      - POSTGRES_DB_FILE=${POSTGRES_DB_FILE:?err}
      - POSTGRES_USER_FILE=${POSTGRES_USER_FILE:?err}
      - POSTGRES_PASSWORD_FILE=${POSTGRES_PASSWORD_FILE:?err}
      - LANG="pt_BR.UTF-8"

    volumes:
      - postgres_db:/var/lib/postgresql/data:rw

    secrets:
      - source: postgres_db
        target: postgres_db
        mode: 0440
      - source: postgres_user
        target: postgres_user
        mode: 0440
      - source: postgres_passwd
        target: postgres_passwd
        mode: 0440

    networks: ["database"]
    expose: ["5432"]

    read_only: true
    tmpfs: ["/var/run/postgresql"]

    healthcheck:
       test: pg_isready --dbname=$$(cat ${POSTGRES_DB_FILE:?err}) --username=$$(cat ${POSTGRES_USER_FILE:?err})
       interval: 5s
       timeout: 5s
       retries: 5

  backend:
    hostname: backend
    container_name: plantei_backend
    image: plantei_backend:1.0
    build:
      context: .
      dockerfile: plantei-backend/Dockerfile
    stop_signal: SIGINT

    deploy:
      resources:
        limits:
          memory: 1G
          pids: 40
        reservations:
          memory: 500M
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

    restart: always
    cap_drop: ["ALL"]

    networks: ["database", "backend"]
    ports: ["8080:8080/tcp"]

    read_only: true
    tmpfs: ["/tmp"]

    depends_on:
      database:
        condition: service_healthy

networks:
  back:
    name: plantei-backend
    driver: bridge
  front:
    name: plantei-frontend
    driver: bridge

volumes:
  postgres_db:

secrets:
  postgres_db:
    file: ./docker/postgres-db.txt
  postgres_user:
    file: ./docker/postgres-user.txt
  postgres_passwd:
    file: ./docker/postgres-passwd.txt
